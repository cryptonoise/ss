import os
import xml.etree.ElementTree as ET
from lxml import etree
from pathlib import Path
import shutil

# ========================================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# ========================================
MIN_NEW_ENGINE = 1300  # Engine 1300+ = Capture One 21 –∏ –Ω–æ–≤–µ–µ
OLD_BACKUP_FOLDER_NAME = "_old_styles" # –ò–º—è –ø–∞–ø–∫–∏ –¥–ª—è –±—ç–∫–∞–ø–∞

# –®–∞–±–ª–æ–Ω ColorCorrections: 8 —Å–ª–æ—ë–≤, –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–Ω–µ –º–µ–Ω—è—é—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
DEFAULT_COLOR_CORRECTIONS_TEMPLATE = (
    "1,1,0,6,0,0,255,128,128,0,0,0,0,0,0,0,0,0;"
    "1,1,0,6,0,0,255,128,128,0,0,0,0,0,0,0,0,0;"
    "1,1,0,6,0,0,255,128,128,0,0,0,0,0,0,0,0,0;"
    "1,1,0,6,0,0,255,128,128,0,0,0,0,0,0,0,0,0;"
    "1,1,0,6,0,0,255,128,128,0,0,0,0,0,0,0,0,0;"
    "1,1,0,6,0,0,255,128,128,0,0,0,0,0,0,0,0,0;"
    "1,1,0,6,0,0,255,128,128,0,0,0,0,0,0,0,0,0;"
    "1,1,0,6,0,0,255,128,128,0,0,0,0,0,0,0,0,0"
)

# ========================================
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# ========================================
def parse_xml_from_string(content, file_name="unknown"):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ XML –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        # –£–¥–∞–ª—è–µ–º BOM, –µ—Å–ª–∏ –µ—Å—Ç—å
        if content.startswith('\ufeff'):
            content = content[1:]

        content = content.strip()
        if not content:
            return None

        # –£–¥–∞–ª—è–µ–º XML-–¥–µ–∫–ª–∞—Ä–∞—Ü–∏—é
        if content.startswith('<?xml'):
            pos = content.find('?>')
            if pos != -1:
                content = content[pos + 2:].strip()
            else:
                content = content[content.find('>') + 1:].strip()

        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å <SL
        if not content.strip().startswith('<SL'):
            return None

        # –ù–∞–π–¥—ë–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —Ç–µ–≥–∞ <SL> ... </SL>
        end_tag = "</SL>"

        # –ù–∞–π–¥—ë–º –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–π </SL>
        end_pos = content.rfind(end_tag)

        if end_pos == -1:
            # –ù–µ—Ç –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–≥–æ —Ç–µ–≥–∞ ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º –µ–≥–æ –¥–æ–±–∞–≤–∏—Ç—å
            content = content.rstrip() + "\n</SL>"
        else:
            # –û–±—Ä–µ–∑–∞–µ–º –≤—Å—ë –ø–æ—Å–ª–µ </SL>
            real_end = end_pos + len(end_tag)
            if real_end < len(content):
                content = content[:real_end]

        # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —Ç–µ–ø–µ—Ä—å XML –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
        root = ET.fromstring(content)
        return root

    except Exception:
        # –õ—é–±–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ -> None
        return None

def get_engine_version(root):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ Engine. –ï—Å–ª–∏ –Ω–µ —á–∏—Å–ª–æ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None."""
    engine_str = root.attrib.get("Engine", None)
    if engine_str is None:
        return None # Engine –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    try:
        return int(engine_str.strip())
    except ValueError:
        return None # Engine –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º

def extract_color_corrections(root):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ ColorCorrections, –µ—Å–ª–∏ –µ—Å—Ç—å"""
    for elem in root.findall("E"):
        if elem.attrib.get("K") == "ColorCorrections":
            return elem.attrib.get("V", "")
    return ""

def merge_color_corrections(original, template):
    """
    –û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ColorCorrections —Å —à–∞–±–ª–æ–Ω–æ–º.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –≥–¥–µ –æ–Ω–∏ –µ—Å—Ç—å.
    –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ª–æ–∏ –±–µ—Ä—É—Ç—Å—è –∏–∑ —à–∞–±–ª–æ–Ω–∞.
    """
    original_layers = [layer.strip() for layer in original.split(";") if layer.strip()]
    template_layers = template.split(";")

    merged = []
    for i in range(len(template_layers)):
        if i < len(original_layers) and original_layers[i]:
            merged.append(original_layers[i])
        else:
            merged.append(template_layers[i])

    return ";".join(merged)

def remove_icc_profile(root):
    """–£–¥–∞–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç <E K="ICCProfile" ... /> –∏–∑ XML, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å."""
    for elem in root.findall("E"):
        if elem.attrib.get("K") == "ICCProfile":
            root.remove(elem)
            return True # –£–¥–∞–ª—ë–Ω
    return False # –ù–µ –Ω–∞–π–¥–µ–Ω

def create_color_corrections_element(value):
    """–°–æ–∑–¥–∞—ë—Ç —ç–ª–µ–º–µ–Ω—Ç <E K="ColorCorrections"> —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º"""
    return ET.Element("E", {
        "K": "ColorCorrections",
        "V": value
    })

def process_cos_content(content: str, file_name: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç XML-—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç–∏–ª—è (.cos –∏–ª–∏ .costyle)"""
    root = parse_xml_from_string(content, file_name)
    if root is None:
        return None

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π Engine
    engine_version = get_engine_version(root)
    # –ï—Å–ª–∏ Engine –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ —á–∏—Å–ª–æ, —Å—á–∏—Ç–∞–µ–º —Å—Ç–∏–ª—å "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º" –∏–ª–∏ "–Ω–µ —Ç—Ä–µ–±—É—é—â–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ Engine"
    # –∏ –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ Engine. –¢–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º ColorCorrections –∏ —É–¥–∞–ª—è–µ–º ICCProfile.
    # –ù–æ –ø–æ –ª–æ–≥–∏–∫–µ —Å–∫—Ä–∏–ø—Ç–∞, –µ—Å–ª–∏ —Å—Ç–∏–ª—å –ø–æ–ø–∞–ª –≤ old_engine_files, –æ–Ω —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω –Ω–∞ < 1300.
    # –û–¥–Ω–∞–∫–æ, —á—Ç–æ–±—ã –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω–Ω—ã–º, –ø—Ä–æ–≤–µ—Ä–∏–º –∑–¥–µ—Å—å.
    # –ù–µ—Ç, –ª–æ–≥–∏–∫–∞ —Ç–∞–∫–∞—è: –µ—Å–ª–∏ —Å—Ç–∏–ª—å –ø–æ–ø–∞–ª –≤ old_engine_files, –æ–Ω —Ç–æ—á–Ω–æ < 1300.
    # –ù–æ –µ—Å–ª–∏ get_engine_version –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None, —ç—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ. –õ—É—á—à–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å.
    # –ü–µ—Ä–µ—Å–º–æ—Ç—Ä–∏–º –ª–æ–≥–∏–∫—É –≤ main.

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—É—â–∏–µ ColorCorrections
    current_cc = extract_color_corrections(root)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π ColorCorrections
    new_cc_value = merge_color_corrections(current_cc, DEFAULT_COLOR_CORRECTIONS_TEMPLATE)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç–ª–µ–º–µ–Ω—Ç ColorCorrections
    cc_element = None
    for elem in root.findall("E"):
        if elem.attrib.get("K") == "ColorCorrections":
            cc_element = elem
            break

    if cc_element is not None:
        cc_element.set("V", new_cc_value)
    else:
        root.append(create_color_corrections_element(new_cc_value))

    # –£–¥–∞–ª—è–µ–º ICCProfile, –µ—Å–ª–∏ –µ—Å—Ç—å
    remove_icc_profile(root)

    # –û–±–Ω–æ–≤–ª—è–µ–º Engine, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∏ –±—ã–ª —Å—Ç–∞—Ä—ã–º
    # –ù–æ —Ç–∞–∫ –∫–∞–∫ –º—ã —É–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ —ç—Ç–æ –≤ main, –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å MIN_NEW_ENGINE
    # if engine_version is not None and engine_version < MIN_NEW_ENGINE:
    # –£–ø—Ä–æ—â–∞–µ–º: –µ—Å–ª–∏ –º—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª, –∑–Ω–∞—á–∏—Ç –æ–Ω —Ç—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Engine
    root.set("Engine", str(MIN_NEW_ENGINE))

    # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä–æ–∫—É
    xml_str = ET.tostring(root, encoding='unicode')
    full_content = f'<?xml version="1.0"?>\n{xml_str}'

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é lxml
    parser = etree.XMLParser(remove_blank_text=True)
    element = etree.fromstring(full_content, parser)
    pretty_content = etree.tostring(element, pretty_print=True, encoding='unicode')

    return pretty_content

def convert_single_file(src_path: Path, backup_path: Path, input_folder: Path):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª (.cos –∏–ª–∏ .costyle), —Å–æ—Ö—Ä–∞–Ω—è—è –æ—Ä–∏–≥–∏–Ω–∞–ª –≤ backup_path —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—è –∏—Å—Ö–æ–¥–Ω—ã–π"""
    try:
        # –û–±–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–æ–≤ - –æ–±—ã—á–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ XML
        with open(src_path, 'r', encoding='utf-8-sig') as f:
            original_content = f.read()

        processed_content = process_cos_content(original_content, src_path.name)
        if processed_content is None:
            return False

        # 1. –ö–æ–ø–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É –±—ç–∫–∞–ø–∞, —Å–æ—Ö—Ä–∞–Ω—è—è —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        try:
            relative_path = src_path.relative_to(input_folder)
            backup_file_path = backup_path / relative_path
            backup_file_path.parent.mkdir(parents=True, exist_ok=True)
            shutil.copy2(src_path, backup_file_path) # copy2 —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        except Exception:
            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –±—ç–∫–∞–ø–∞
            pass

        # 2. –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
        try:
            with open(src_path, 'w', encoding='utf-8') as f:
                f.write(processed_content)
            return True
        except Exception:
            return False

    except Exception:
        return False

# ========================================
# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
# ========================================
def main():
    print("üîç Capture One Style Converter v14")
    print("‚Äî –ü–æ–¥–¥–µ—Ä–∂–∫–∞ .cos –∏ .costyle (–∫–∞–∫ XML)")
    print("‚Äî –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç–∏–ª–µ–π —Å Engine < 1300")
    print("‚Äî –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ColorCorrections (8 —Å–ª–æ—ë–≤)")
    print("‚Äî –£–¥–∞–ª–µ–Ω–∏–µ ICCProfile")
    print("‚Äî –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–≤ –≤ –ø–∞–ø–∫—É '_old_styles' —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã")
    print("‚Äî –ü–µ—Ä–µ–∑–∞–ø–∏—Å—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–º–∏\n")

    # –í–≤–æ–¥ –ø—É—Ç–∏
    input_path = input("üìÅ –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å–æ —Å—Ç–∏–ª—è–º–∏: ").strip().strip('"\'')
    input_folder = Path(input_path)

    if not input_folder.exists():
        print("‚ùå –û—à–∏–±–∫–∞: –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return
    if not input_folder.is_dir():
        print("‚ùå –û—à–∏–±–∫–∞: –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–∞–ø–∫–æ–π.")
        return

    # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö .cos –∏ .costyle
    cos_files = list(input_folder.rglob("*.cos"))
    costyle_files = list(input_folder.rglob("*.costyle"))
    all_files = cos_files + costyle_files

    if not all_files:
        print("‚ö†Ô∏è  –í —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ .cos –∏–ª–∏ .costyle.")
        return

    # –ê–Ω–∞–ª–∏–∑: –∫–∞–∫–∏–µ Engine
    old_engine_files = []
    new_engine_files = []
    corrupted_files = []

    for file_path in all_files:
        try:
            # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ v6/v10/v13 - –æ–±–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–æ–≤ –∫–∞–∫ XML
            with open(file_path, 'r', encoding='utf-8-sig') as f:
                content = f.read()

            root = parse_xml_from_string(content, file_path.name)
            if root is None:
                corrupted_files.append(file_path)
                continue

            engine_version = get_engine_version(root)

            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞:
            # - –ï—Å–ª–∏ Engine –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (None) –∏–ª–∏ >= MIN_NEW_ENGINE -> –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π
            # - –ï—Å–ª–∏ Engine < MIN_NEW_ENGINE -> –£—Å—Ç–∞—Ä–µ–≤—à–∏–π
            if engine_version is not None and engine_version < MIN_NEW_ENGINE:
                old_engine_files.append((file_path, engine_version))
            else:
                new_engine_files.append((file_path, engine_version if engine_version is not None else "N/A"))

        except Exception:
            corrupted_files.append(file_path)

    # –û—Ç—á—ë—Ç (—Ç–æ–ª—å–∫–æ –∏—Ç–æ–≥–∏)
    total = len(all_files)
    old_count = len(old_engine_files)
    new_count = len(new_engine_files)
    corrupt_count = len(corrupted_files)

    print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∏–ª–µ–π: {total}")
    print(f"  ‚Ä¢ –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ (Engine < {MIN_NEW_ENGINE}): {old_count}")
    if old_count > 0:
        engines = [str(v) for _, v in old_engine_files]
        unique_engines = sorted(set(engines), key=lambda x: int(x) if x.isdigit() else 0)
    print(f"  ‚Ä¢ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ (Engine ‚â• {MIN_NEW_ENGINE} –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç): {new_count}")
    if corrupt_count:
        print(f"  ‚Ä¢ –ü–æ–≤—Ä–µ–∂–¥—ë–Ω–Ω—ã–µ/–Ω–µ—á–∏—Ç–∞–µ–º—ã–µ: {corrupt_count}")
    if old_count == 0:
        print("\n‚úÖ –ù–µ—Ç —Å—Ç–∏–ª–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        return

    # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å (—Ç–æ–ª—å–∫–æ –∏—Ç–æ–≥–∏ –∏ –∑–∞–ø—Ä–æ—Å)
    print(f"\nüîÑ –ù–∞–π–¥–µ–Ω–æ {old_count} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å—Ç–∏–ª–µ–π.")
    response = input("–•–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –∏—Ö? (y/n): ").strip().lower()
    if response not in ('y', 'yes', '–¥', '–¥–∞'):
        print("–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –±—ç–∫–∞–ø–∞
    backup_folder = input_folder / OLD_BACKUP_FOLDER_NAME
    try:
        backup_folder.mkdir(parents=True, exist_ok=True)
    except Exception:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –ø–∞–ø–∫–∏ –¥–ª—è –±—ç–∫–∞–ø–∞.")
        return

    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è (–±–µ–∑ –≤—ã–≤–æ–¥–∞ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞)
    # print("\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Ç–∏–ª–∏...") # –£–±—Ä–∞–Ω–æ
    converted = 0
    failed = 0

    for src_path, engine_ver in old_engine_files:
        try:
            success = convert_single_file(src_path, backup_folder, input_folder)
            if success:
                # print(f"‚úÖ {src_path.relative_to(input_folder)}") # –£–±—Ä–∞–Ω–æ
                converted += 1
            else:
                failed += 1
        except Exception:
            failed += 1

    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç (—Ç–æ–ª—å–∫–æ –∏—Ç–æ–≥–∏)
    print(f"\nüéâ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"  –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {converted}")
    if failed:
        print(f"  –û—à–∏–±–æ–∫: {failed}")
    print(f"  –û—Ä–∏–≥–∏–Ω–∞–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {backup_folder}")


# ========================================
# –ó–∞–ø—É—Å–∫
# ========================================
if __name__ == "__main__":
    main()
